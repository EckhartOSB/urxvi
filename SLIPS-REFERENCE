Slips	Sloppy Lisp

by Chip Camden
January, 2011

The Slips language is loosely based on various Lisp dialects,
but its syntax is considerably relaxed to make it more natural
for use in the rc files of the urxvi Perl extension
(http://chipstips.com/?tag=plurxvi) for the rxvt-unicode X11
terminal (aka urxvt, http://software.schmorp.de/pkg/rxvt-unicode.html).

The biggest syntactical differences between Slips and most Lisp
flavors include:

- # as a comment character
- parentheses may be omitted if not required for grouping
- end-of-line terminates a statement, if all parentheses are matched
- strings do not have to be quoted, unless they contain special characters
  or match function names
- if a token is all digits, it will be treated as a number
- if a token is '0x' followed by hexadecimal digits (upper or lower case),
  it will be treated as a hexadecimal number
- late binding of arguments is presumed

Thus, for example, the simple command:

bind q quit

which binds the 'q' key to the 'quit' command, would under strict Lisp
syntax be something like:

(bind "q" #'quit)

This simplification of punctuation necessarily limits the expressiveness
of Slips -- but we aren't trying to create artifical intelligence here.

Currently, Slips' syntax is limited to features that are useful for urxvi --
although that feature set may be extended in the future.  I therefore decided
to give it the self-referential name "Slips", for "Sloppy Lisp".

Because Slips is written in Perl (following the true pattern of the universe
http://xkcd.com/224/), its understanding of types conforms to Perl's --
except that the penchant to treat everything as a string is perhaps even
more pronounced.  All arguments begin life as strings or numbers in Slips,
and only become other things as they are coerced by the operations
performed on them.


BUILT-IN FUNCTIONS

The following sections document each of the built-in Slips functions, in
ASCII order.  The syntax for each command is shown in parentheses,
although as mentioned above they arfen't always required.  When a token
may be repeated, it is followed by an ellipsis (...).  Optional tokens
are enclosed in [].  The symbol => separates the syntactic form from its
return value.

Many of these functions require row and/or column numbers as arguments.
Unless otherwise specified, column 0 is the leftmost column, and row 0
is the first row of the last screenful of rows.  Rows in the scrollback
buffer have negative row numbers.

This section includes functions that are defined in the supplied urxvirc.
These are noted accordingly.

-------------------------------------------------------------------------------

$ -- Last non-blank character position

($ [row]) => number

Returns the column position of the first non-whitespace character in
the row specified by the row argument (cursor_row if unspecified).
If the row contains no non-blank characters, 0 is returned.

-------------------------------------------------------------------------------

* -- Numeric multiplication

(* operand...) => number

Multiplies all of the operands and returns the result.

-------------------------------------------------------------------------------

+ -- Numeric addition

(+ operand...) => number

Adds all of the operands and returns the result.

-------------------------------------------------------------------------------

- -- Numeric substraction

(- operand...) => number

Subtracts the second and following operands from the first, and returns
the result.

-------------------------------------------------------------------------------

/ -- Numeric division

(/ operand...) => number

Divides the first operand by each successive operand, and returns the
result.

-------------------------------------------------------------------------------

^ -- First non-blank character position

(^ [row]) => number

Computes the column position of the first non-whitespace character in the
row specified (cursor_row if not specified).  Returns 0 if the row contains
no non-blank characters.

-------------------------------------------------------------------------------

and - Boolean AND

(and operand...) => operand

Evaluates each operand until one of them yields a false result, and returns it.
If none of the operands yield false, returns the last operand.

-------------------------------------------------------------------------------

apply - Call a function by name

(apply name [arg...]) => result

Calls the function whose name is name (string), passing the arguments and
returning the result.  The following three statements are functionally
equivalent:

(apply 'myfunc' arg)
(call (getdef 'myfunc') arg)
(myfunc arg)

-------------------------------------------------------------------------------

append - Append arrays

(append array...) => array

Concatenates the contents of all array arguments into a single array.  If
an argument is not an array, an error occurs.

-------------------------------------------------------------------------------

ask - Prompt the user for a response

(ask prompt function [default]) => boolean

Enters command mode after setting the (cmd_prompt) to prompt,
(cmd_action) to function, and (cmd_text) to default (if passed).
It also turns on (cmd_insert_mode) and sets (cmd_pos) to the end
of the default text.

The key bindings provided in urxvirc bind <Enter> to execute the
function.

This function is defined in urxvirc.

-------------------------------------------------------------------------------

bind - Bind a key to a Slips command

(bind key cmd) => mapping

Binds the key specified in the key argument to the Slips command specified by
cmd.  This binding only takes effect when (cmd_mode) is false.  Possible values
for the key specification can be found in the section entitled KEY NAMES below.

The cmd has an implied (lambda () ) around it.  Do not specify one, or your key
will only return the lambda.

-------------------------------------------------------------------------------

bit_and - Bitwise AND

(bit_and value...) => number

Interprets each argument as a number and performs a bitwise AND operation on
them.

-------------------------------------------------------------------------------

bit_not - Bitwise NOT

(bit_not value) => number

Interprets the first argument as a number and then flips all its bits.

-------------------------------------------------------------------------------

bit_or - Bitwise OR

(bit_or value...) => number

Interprets each argument as a number and performs a bitwise OR operation on
them.

-------------------------------------------------------------------------------

bit_xor - Bitwise XOR

(bit_xor value...) => number

Interprets each argument as a number and performs a bitwise XOR operation on
them.  The result of XORing the first pair is XORed against the third argument
(if present), and the result of that is XORed against the fourth, etc.  That's
an important distinction from the alternative of taking them all together.

For example:

(bit_xor 0x10 0x10 0x10)

yields 0x10, because XORing the first two values produced 0x00.

-------------------------------------------------------------------------------

call - Call a function anonymously

(call function arg...) => result

Calls a function (constructed by the "lambda" or "def" command), passing it the
arg parameters, and returning its result.

-------------------------------------------------------------------------------

cmd_action - Function to execute for command mode

(cmd_action [function]) => function

If function is passed, it should be a lambda that takes one argument, which
will be passed as the text of the command buffer.

Returns the previous setting, which may be nil.

-------------------------------------------------------------------------------

cmd_bind - Bind a key in command mode

(cmd_bind key cmd) => mapping

Binds the key specified in the key argument to the Slips command specified by
cmd.  This binding only takes effect while (cmd_mode) is true.  Possible values
for the key specification can be found in the section entitled KEY NAMES below.

The cmd has an implied (lambda () ) around it.  Do not specify one, or your key
will only return the lambda.

-------------------------------------------------------------------------------

cmd_insert_mode - Insert/overstrike in command mode

(cmd_insert_mode [boolean]) => boolean

Sets and/or gets the insert mode for command mode.  If passed, a true value
causes subsequent unbound keystrokes in command mode to insert their character
representations at the location of the command cursor, while a false value
replaces the character at the command cursor location.

Returns the previous value.

-------------------------------------------------------------------------------

cmd_mode - Sets/gets command mode

(cmd_mode [boolean]) => boolean

Sets and/or gets the command mode.  If passed, a true value causes a command
line to be displayed on the bottom row of the terminal window, and future
keystrokes will be bound according to previous (cmd_bind) invocations instead
of (bind).  Unbound keys will be added to the command line at the location
of the command cursor (see cmd_pos) in insert or overstrike mode, depending on
(cmd_insert_mode).  See (ask).

Returns the previous setting.

-------------------------------------------------------------------------------

cmd_pos - Sets/gets the command cursor position

(cmd_pos [number]) => number

Sets and/or gets the column position of the command cursor within the command
line (which is only visible if cmd_mode is true, but can be accessed at other
times as well).  The value will be automatically limited to no less than 0 and
no greater than the length of (cmd_text) on the next screen update in command
mode.

Returns the previous value.

-------------------------------------------------------------------------------

cmd_prompt - Sets/gets the command line prompt

(cmd_prompt [string]) => string

Sets and/or gets the prompt displayed to the left of the command line when
(cmd_mode) is true.  Returns the previous value.

-------------------------------------------------------------------------------

cmd_text - Sets/gets the command line buffer

(cmd_text [string]) => string

Sets and/or gets the text of the command buffer.  Returns the previous value.

-------------------------------------------------------------------------------

context - Get the current execution context

(context) => context

Returns the current calling context.  This is only useful if you're saving it
to pass to "in" within a different context.  For example:

(let ((outer context))
     (let ()
	  (def 'xyz' 123)
	  (in outer (def 'xyz' 456))
          # (xyz) => 123 here
	  )  # end of let
     # (xyz) => 456 here
     )
# (xyz) => 'xyz' here

See global_context for retrieving the outermost context, or prev_context for
retrieving the previous context.

-------------------------------------------------------------------------------

cursor_column - Cursor column position

(cursor_column) => number

Returns the current column position of the cursor.  To move the cursor, see
the move, posx, and posy functions.

-------------------------------------------------------------------------------

cursor_pos - Set/get cursor position

(cursor_pos array) => array

Returns the old position as (row col).  If array is specified, moves the
cursor to that position, if the first two elements specify a valid row and
column, respectively.  Scrolls row into view if needed.

-------------------------------------------------------------------------------

cursor_row - Cursor row position

(cursor_row) => number

Returns the current row position of the cursor.  To move the cursor, see the
move, posx, and posy functions.

------------------------------------------------------------------------------

def - Define a new function

(def name (arg...) cmd...) => function

Creates a new function named name, which takes the arguments specified by
(arg...) and executes the commands specified by the cmd arguments, returning
the result of the last cmd.  The def function itself returns a function that
may be passed to the "call" command, but it's probably more useful to call 
the function by its name.  For anonymous functions, see "lambda".

The name argument is a string, not a token.  Thus, you can use other functions
to generate the name.  Conversely, you can use the apply function to call a
function whose name is generated in the same way.

If a function already exists with the specified name, it will be superceded --
even if it is a built-in function.  Note that in that case you will need to
enclose name in quotes, to avoid invoking the earlier definition.

The function will be defined within the current scope.  That is, if the def
invocation occurs within a let or a lambda, its scope will be limited to that
statement.  defs occurring outside all such statements have a global scope.
See the "in" function for explicitly establishing scope.

If any arg is itself a list, it takes the form:

(argname default)

where argname is the argument name, and default is a form to evaluate for its
default value if not passed.

-----------------------------------------------------------------------------

each - Process each element of an array

(each array function) => result

Passes each element of array in turn to function.  See lambda.  Returns the
result of the last invocation of function.

-----------------------------------------------------------------------------

eq - String equality

(eq op1 op2) => boolean

Compares the evaluation of both operands using Perl's eq operator, and returns
the result.

----------------------------------------------------------------------------

find_backward - Find the previous occurence of a pattern

(find_backward patterm [begpos]) => array

If begpos is passed, it must be an array of (row col) for the position before
which the match must occur.  If not passed, it defaults to (cursor_pos).

The pattern is a Perl regular expression (without delimiters) for which to
search.

Returns an array specifying the position of the found string as (row col) if
found, otherwise nil.

----------------------------------------------------------------------------

find_forward - Find the next occurence of a pattern

(find_forward pattern [begpos]) => array

If begpos is passed, it must be an array of (row col) for the position after
which the match must occur.  If not passed, it defaults to (cursor_pos).

The pattern is a Perl regular expression (without delimiters) for which to
search.

Returns an array specifying the position of the found string as (row col) if
found, otherwise nil.

----------------------------------------------------------------------------

first_row - First row in the terminal window

(first_row) => number

Returns the row number of the first accessible row in the window.  This will
be negative if any text has been scrolled out of the window, otherwise 0.

-----------------------------------------------------------------------------

format - Format a string

(format fmt [arg...]) => string

Uses sprintf to format a string, with fmt as the format.

-----------------------------------------------------------------------------

ge - String greater-than-or-equal

(ge op1 op2) => boolean

Compares the evaluation of both operands using Perl's ge operator, and returns
the result.

-----------------------------------------------------------------------------

getdef - Get a lambda for a define function

(getdef name) => function

This function returns the function associated with name (string), which may
then be passed to call or any other function that requires a function
argument.

-----------------------------------------------------------------------------

global_context - Get the global execution context

(global_context) => context

Returns the outermost (global) execution context.  This is only useful when
passed to the "in" function to override the context of definitions.  For example:

(let ()
     (def 'xyz' 123)
     (in global_context (def 'xyz' 456))
     xyz	# => 123
     )
xyz		# => 456

See the "context" function for retrieving the current context.  For many
applications, "prev_context" might be a better option than using "global_context".

-----------------------------------------------------------------------------

gt - String greater-than

(gt op1 op2) => boolean

Compares the evaluation of both operands using Perl's gt operator, and returns
the result.

-----------------------------------------------------------------------------

horz - Move the cursor horizontally

(horz cols) => array

Moves the cursor by the number of columns specified times the repeat count,
if any is in effect.  Returns an array with the new position (row col).

Defined in the supplied version of urxvirc.

-----------------------------------------------------------------------------

if - Conditional branch

(if cond iftrue [iffalse]) => result

Evaluates cond for truth.  If true, evaluates and returns iftrue.  Otherwise,
evaluates and returns iffalse.

-----------------------------------------------------------------------------

in - Evaluate functions in a specific context

(in context cmd...)

Evaluates each cmd within the specified execution context.  See "context",
"global_context", and "prev_context".

Example:

def 'xyz' 123
(lambda () 
  (let ((outer prev_context))
       (def 'xyz' 456)
       (in outer (def 'xyz' 789))
       # xyz => 456
       # (in prev_context xyz) => 789
       # (in global_context xyz) => 123
       )
  # xyz => 789 here
  )
# xyz => 123 here

-----------------------------------------------------------------------------

lambda - Define an anonymous function

(lambda (arg...) cmd...) => function

Creates a new unnamed function that takes the specified arguments, evaluates
each of the cmds and returnsa the result of the last one.  The lambda function
itself returns the created function, which may be passed to the "call" function,
or to any event that requires a function.  See "on".

If any arg is itself a list, it takes the form:

(name default)

where name is the argument name, and default is a form to evaluate for its
default value if not passed.

----------------------------------------------------------------------------

last_column - The rightmost visible column

(last_column) => number

Returns the column number of the rightmost column in the terminal window,
including columns in which no text has yet been displayed.

----------------------------------------------------------------------------

last_row - The last row

(last_row) => number

Returns the row number of the bottom row of the terminal window, including
rows in which no text has yet been displayed.

-----------------------------------------------------------------------------

le - String less-than-or-equal

(le op1 op2) => boolean

Compares the evaluation of both operands using Perl's le operator, and returns
the result.

-----------------------------------------------------------------------------

length - Get length of a string or array

(length str_or_array) => number

Returns the length of str_or_array.  If not an array, str_or_array is treated
as a string.

-----------------------------------------------------------------------------

let - Establish scoped assignments

(let ((var value)...) cmd...) => result

For each (var value) pair, evaluates value and assigns it to var for the scope
of the let statement only.  Each cmd is then evaluated, and the result of the
last one evaluated is returned.

Note that each value is evaluated in the context of the let in order.  Thus,
you can use a var within a subsequent value, or even within the var's own value
if its evaluation is delayed (as in a lambda).

Thus, a good model for hooking events is to save off the old event handler
to call in a cascaded fashion:

let ((old_handler
       (on 'eventname' 
         (lambda ()
	   (do what i need)
	   (call old_handler))))))

Or see the default binding of 'y' in urxvirc for an example of restoring
the old event handler when ours has served its purpose.

-----------------------------------------------------------------------------

list - Construct an array

(list element...) => array

Creates and returns an array composed of all elements.  If an element is
itself an array, it becomes a nested array.

-----------------------------------------------------------------------------

lt - String less-than

(lt op1 op2) => boolean

Compares the evaluation of both operands using Perl's lt operator, and returns
the result.

------------------------------------------------------------------------------

map - Map a key to an input series

(map key input) => array

binds the key specified by key to push the input characters contained in
input.  See the section on KEY NAMES for the possible values of key and
input.  Returns (input).

Defined in the supplied version of urxvirc.

------------------------------------------------------------------------------

max - Maximum value

(max operand...) => operand

Returns the operand whose value is numerically the greatest.

-----------------------------------------------------------------------------

message - display a message in the status line

(message operand...) => string

Evaluates all operands, joins their string representations together,
separated by spaces, and displays the result in the status line until
the next keystroke by the user.  Returns the constructed string.

-----------------------------------------------------------------------------

min - Minimum value

(min operand...) => operand

Returns the operand whose value is numerically the least.

-----------------------------------------------------------------------------

move - Move the cursor relative to the current position

(move nrows [ncols]) => array

Moves the cursor the specified number of rows and/or columns from its current
position.  Negative values move up/left, positive move down/right.  Movement
is limited to the available rows and columns in the window.  If the new row
is not visible, the view will be scrolled to make that row visible.

Returns the new position (row col).

-----------------------------------------------------------------------------

ne - String not-equal

(ne op1 op2) => boolean

Compares the evaluation of both operands using Perl's ne operator, and returns
the result.

------------------------------------------------------------------------------

nil - Nil value

(nil) => nil

Yields a nil value, which is also logically false.  This value can be used in
place of an argument that isn't passed, if needed as a placeholder.

------------------------------------------------------------------------------

not - Invert a boolean result

(not operand) => boolean

Returns the reverse of the boolean sense of operand.

-----------------------------------------------------------------------------

nth - Return an element from an array

(nth array index) => element

Evaluates index as a number and returns that element from array.  If array is
not an array, an error occurs.  If the index is out of bounds, a null value
is returned.

-----------------------------------------------------------------------------

on - Register an event handler

(on event [function]) => function

Binds a function to the named event, returning the previously bound
function, if any.  If no function is passed, then the event is unbound.
It's a good idea to enclose the name of the event in quotes to avoid
possibly evaluating another function.

The function can be created with "lambda" or "def".  See the section named
EVENTS for a list of known events and their arguments.

-------------------------------------------------------------------------------

or - Boolean OR

(or operand...) => operand

Evaluates each operand until one of them yields a true result, and returns it.
If none of the operands yield truth, returns a false result.

-------------------------------------------------------------------------------

page_size - Number of rows in a page

(page_size) => number

Returns the number of rows in the terminal window.  This is actually one
greater than the number of visible rows, because of urxvi's status row display.
It is also always one greater than the result of (last_row).

------------------------------------------------------------------------------

posx - Position the cursor to an absolute column

(posx column) => array

Attempts to place the cursor at the specified column.  If the column number is
invalid (less than 0 or greater than last_column), returns false without moving
the cursor.  Otherwise, returns the new position as an array (row col).

------------------------------------------------------------------------------

posy - Position the cursor to an absolute row

(posy row) => array

Attempts to place the cursor at the specified row.  If the row number is invalid
(less than first_row or greater than last_row), returns false without moving the
cursor.  Otherwise, returns the new position as an array (row col).

-----------------------------------------------------------------------------

prev_context - Get the previous execution context

(prev_context [context]) => context

Returns the execution context immediately outside the specified context, or the
current context if none is specified.  This is only useful when passed to the
"in" function to override the context of definitions.  For example:

(let ()
     (def 'xyz' 123)
     (in prev_context (def 'xyz' 456))
     xyz	# => 123
     )
xyz		# => 456

See the "context" function for retrieving the current context, and the
"global_context" function for retrieving the global context.

-----------------------------------------------------------------------------

progn - Perform multiple commands

(progn cmd...) => result

Evaluates each cmd argument in turn, returning the result of the last one.

----------------------------------------------------------------------------

push_input - Feed input characters to urxvi

(push_input string...) => array

Interprets each string as a series of keys to simulate in turn.  See the
section on KEY NAMES for possible values.  Returns all arguments.

-----------------------------------------------------------------------------

push_key - Feed input keysyms to urxvi

(push_key key...) => array

Interprets each key as a numeric keysym value to simulate in turn.  Returns
all arguments.

------------------------------------------------------------------------------

push_repeat - Add a digit to the repeat count

(push_repeat digit) => number

Adds the digit to the current repeat count, and returns the new repeat count.
For example, if the old repeat count was 2, pushing a 1 would yield 21.  When
no repeat count has been started, the value is 0, so the first digit pushed
yields that number.

------------------------------------------------------------------------------

quit - Exit urxvi

(quit) => 1

Returns the terminal window to its normal input state.

------------------------------------------------------------------------------

range - Construct an array from beginning and ending values

(range begin end) => array

Creates an array that contains all elements from begin through end, inclusive.

------------------------------------------------------------------------------

repeat - Set/get repeat count

(repeat [new]) => number

If new is specified, sets the repeat count to that value.  Always returns the
previous repeat count.  Note that the repeat count is usually cleared after
every keystroke.  However, if you touch it via the "repeat" or "push_repeat"
commands, then it will be preserved for the next keystroke.

------------------------------------------------------------------------------

select - Select a region

(select [brow bcol erow ecol]) => array

If all four arguments are passed, then the text from the beginning row/column
to the ending row/column will be selected.  Otherwise, any selection will be
cleared.  The returned array contains the coordinates of the resulting selection
(brow bcol erow ecol).

-----------------------------------------------------------------------------

select_mode - Set/get the selection mode

(select_mode [new]) => string;

If new is specified, then the selection mode will be set as follows:
if new is 'line', line-wise selection; any other true value, character-wise
selection; any false value, no selection.

The previous selection mode is returned.

------------------------------------------------------------------------------

selection - Get the currently selected text, if any

(selection) => string

Returns the currently selected text, or a false value if no text is selected.

------------------------------------------------------------------------------

source - Read commands from additional files

(source file...) => boolean

Attempts to read and evaluate commands from each of the file arguments in
turn, returning a true value if the last one could be read, otherwise a
false value.

Each file name will be globbed.

------------------------------------------------------------------------------

substr - Extract a substring

(substr string begin [length]) => string

Extracts the portion of string beginning at begin (0-based) for a length of
length (if passed).  The length defaults to the remainder of the string, and
is also limited to that.

------------------------------------------------------------------------------

vert - Move the cursor vertically

(vert rows)

Moves the cursor vertically based on the specified rows, times any repeat
count that may be in effect.

Defined in the supplied version of urxvirc.

------------------------------------------------------------------------------

view_start - First visible row

(view_start) => number

Returns the row number of the first visible row.  If the view is not scrolled
back, this will be 0.  Otherwise, it will be a negative number.

------------------------------------------------------------------------------


KEY NAMES

The names of keys specified in the "bind", "push_input", and "map" commands
generally agree with key specifications in vi's "map" command.  A single
character corresponds to the key used to create it, like "A" or "z".  Special
tokens enclosed in <> have the following meanings (keysym value in parentheses):

<BS> = backspace (0xff08)
<Tab> = tab (0xff09)
<NL> = Newline (0xff0a)
<FF> = Form feed (0xff0c)
<CR>, <Return>, <Enter> = Carriage return (0xff0d)
<Esc> = Escape (0xff1b)
<Space> = space (0x20)
<Del> = Delete (0xffff)
<Up> = Up arrow (0xff52)
<Down> = Down arrow (0xff54)
<Left> = Left arrow (0xff51)
<Right> = Right arrrow (0xff53)
<F1>..<F12> = F1..F12 (0xffbe..0xffc9)
<Insert> = Insert (0xff63)
<Home> = Home (0xff50)
<End> = End (0xff57)
<PageUp> = Page Up (0xff55)
<PageDown> = Page Down (0xff56)
<kHome> = Keypad Home (0xff95)
<kEnd> = Keypad End (0xff9c)
<kPageUp> = Keypad Page Up (0xff9a)
<kPageDown> = Keypad Page Down (0xff9b)
<kPlus> = Keypad Plus (0xffab)
<kMinus> = Keypad Minus (0xffad)
<kMultiply> = Keypad Multiply (0xffaa)
<kDivide> = Keypad Divide (0xffaf)
<kEnter> = Keypad Enter (0xff8d)
<kPoint> = Keypad Period (0xffae)
<k0>..<k9> = Keypad 0..9 (0xffb0..0xffb9)

Any of the above can include one or more prefixes to indicate a shift state:

S- = Shift
C- = Ctrl
M- = Mod4 (typically the Windows key)
A- = Alt

For example, <A-F1> would be the F1 key while Alt is down.
<C-S-Enter> would be Ctrl+Shift+Enter.

------------------------------------------------------------------------------


EVENTS

The following event names are known by urxvi and triggered automatically.  They
are each given with their lambda signature and expected return values.

------------------------------------------------------------------------------

keypress - User pressed a key

(lambda (key) body) => boolean

The key passed is a keysym in the lower 16 bits, with the upper sixteen bits
containing shift bits.  Use bit_and top mask for the following "constants":

MK_SHIFT	Shift key was down (except for letters)
MK_CONTROL	Control key was down
MK_MOD4		Mod4 key was down (usually the Windows key)
MK_ALT		Alt key was down

For instance,

(if (bit_and key MK_CONTROL)
    (message "control key"))

To obtain only the character portion of the key, mask off the upper bits (e.g.,
(bit_and key 0xffff)).

Return a true value to indicate that the key has been handled and no further
action is required.  A false return will treat the keystroke normally.

Note that for most keystrokes, "bind" or "map" will probably do what you want.
the "keypress" event should be used primarily for key filtering.

------------------------------------------------------------------------------

quit - Exit urxvi mode

(lambda () body) => ignored

This function is triggered whenever the user exits urxvi, whether by repeating
the "urxvi" user command or by executing the "quit" function.  Note that in the
"on" function for this event, you must enclose "quit" in quotes to avoid
evaluating the quit function instead.  For example:

on 'quit' (lambda () ...)

------------------------------------------------------------------------------

start - User entered urxvi mode

(lambda () body) => ignored

This function is triggered whenever urxvi is invoked by the user command
"urxvi".

------------------------------------------------------------------------------
